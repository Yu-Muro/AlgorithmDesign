# -*- coding: utf-8 -*-

N=100
M=195
edges = ( ( 0 ,  39  ), ( 0 ,  90  ), ( 0 ,  99  ), ( 1 ,  11  ), ( 1 ,  17  ), ( 1 ,  27  ), ( 1 ,  37  ), ( 1 ,  89  ), ( 2 ,  15  ), ( 2 ,  17  ), ( 2 ,  98  ), ( 3 ,  25  ), ( 3 ,  44  ), ( 3 ,  53  ), ( 4 ,  44  ), ( 4 ,  52  ), ( 4 ,  54  ), ( 4 ,  72  ), ( 4 ,  98  ), ( 5 ,  51  ), ( 5 ,  83  ), ( 5 ,  91  ), ( 6 ,  56  ), ( 6 ,  86  ), ( 7 ,  40  ), ( 7 ,  55  ), ( 7 ,  61  ), ( 7 ,  62  ), ( 8 ,  16  ), ( 8 ,  20  ), ( 8 ,  22  ), ( 8 ,  37  ), ( 8 ,  72  ), ( 8 ,  83  ), ( 9 ,  53  ), ( 9 ,  54  ), ( 9 ,  87  ), ( 10 ,  37  ), ( 10 ,  59  ), ( 11 ,  13  ), ( 11 ,  63  ), ( 12 ,  16  ), ( 12 ,  35  ), ( 12 ,  51  ), ( 12 ,  53  ), ( 12 ,  63  ), ( 13 ,  56  ), ( 13 ,  65  ), ( 13 ,  71  ), ( 14 ,  19  ), ( 14 ,  66  ), ( 14 ,  98  ), ( 15 ,  75  ), ( 15 ,  89  ), ( 16 ,  18  ), ( 16 ,  24  ), ( 16 ,  36  ), ( 16 ,  54  ), ( 17 ,  38  ), ( 17 ,  51  ), ( 18 ,  55  ), ( 18 ,  75  ), ( 19 ,  44  ), ( 19 ,  47  ), ( 19 ,  49  ), ( 19 ,  87  ), ( 20 ,  32  ), ( 20 ,  58  ), ( 20 ,  76  ), ( 20 ,  79  ), ( 21 ,  59  ), ( 21 ,  62  ), ( 22 ,  57  ), ( 22 ,  69  ), ( 23 ,  43  ), ( 23 ,  72  ), ( 24 ,  27  ), ( 24 ,  45  ), ( 25 ,  27  ), ( 25 ,  42  ), ( 25 ,  48  ), ( 25 ,  92  ), ( 26 ,  90  ), ( 28 ,  84  ), ( 28 ,  86  ), ( 29 ,  40  ), ( 29 ,  47  ), ( 29 ,  53  ), ( 29 ,  73  ), ( 29 ,  99  ), ( 30 ,  44  ), ( 30 ,  55  ), ( 30 ,  89  ), ( 31 ,  65  ), ( 31 ,  74  ), ( 31 ,  79  ), ( 31 ,  88  ), ( 32 ,  36  ), ( 32 ,  41  ), ( 32 ,  44  ), ( 32 ,  56  ), ( 32 ,  67  ), ( 32 ,  70  ), ( 32 ,  76  ), ( 33 ,  90  ), ( 34 ,  56  ), ( 34 ,  70  ), ( 34 ,  92  ), ( 36 ,  63  ), ( 36 ,  68  ), ( 36 ,  90  ), ( 36 ,  91  ), ( 37 ,  60  ), ( 37 ,  86  ), ( 37 ,  88  ), ( 38 ,  76  ), ( 39 ,  56  ), ( 39 ,  72  ), ( 40 ,  56  ), ( 40 ,  65  ), ( 40 ,  70  ), ( 40 ,  78  ), ( 40 ,  88  ), ( 40 ,  89  ), ( 41 ,  77  ), ( 42 ,  74  ), ( 42 ,  79  ), ( 42 ,  86  ), ( 43 ,  46  ), ( 43 ,  91  ), ( 44 ,  60  ), ( 45 ,  96  ), ( 45 ,  97  ), ( 46 ,  84  ), ( 48 ,  98  ), ( 49 ,  59  ), ( 49 ,  80  ), ( 49 ,  90  ), ( 49 ,  94  ), ( 49 ,  97  ), ( 50 ,  84  ), ( 50 ,  90  ), ( 51 ,  67  ), ( 51 ,  77  ), ( 51 ,  82  ), ( 52 ,  93  ), ( 52 ,  99  ), ( 53 ,  81  ), ( 55 ,  65  ), ( 55 ,  74  ), ( 55 ,  77  ), ( 55 ,  88  ), ( 55 ,  97  ), ( 56 ,  73  ), ( 57 ,  60  ), ( 57 ,  81  ), ( 57 ,  90  ), ( 58 ,  67  ), ( 58 ,  73  ), ( 59 ,  66  ), ( 59 ,  70  ), ( 60 ,  72  ), ( 61 ,  64  ), ( 61 ,  99  ), ( 62 ,  67  ), ( 62 ,  82  ), ( 63 ,  65  ), ( 63 ,  72  ), ( 63 ,  89  ), ( 64 ,  72  ), ( 64 ,  96  ), ( 66 ,  90  ), ( 66 ,  96  ), ( 68 ,  79  ), ( 70 ,  92  ), ( 71 ,  74  ), ( 71 ,  88  ), ( 71 ,  95  ), ( 72 ,  77  ), ( 72 ,  91  ), ( 73 ,  74  ), ( 74 ,  80  ), ( 74 ,  86  ), ( 78 ,  86  ), ( 78 ,  93  ), ( 82 ,  97  ), ( 83 ,  92  ), ( 83 ,  95  ), ( 84 ,  86  ), ( 85 ,  88  ), ( 87 ,  90  ), ( 88 ,  91  ), ( 89 ,  96  ), ( 89 ,  98  ), ( 92 ,  97  ) )

bridge = 0
for m in range(len(edges)):
   sets = [{k} for k in range(N)] #頂点の集合
   node_0, node_1 = 0, 0
   for n in range(len(edges)):
      if m != n: #m != nのときのみ処理
         for j in range( len(sets) ): #nの集合を探す
            if edges[n][0] in sets[j]:
               node_0 = j
            if edges[n][1] in sets[j]:
               node_1 = j
         if node_0 < node_1: #集合の結合
            sets[node_0].update( sets.pop( node_1 ) )
         elif node_0 > node_1:
            sets[node_1].update( sets.pop( node_0 ) )
   if len(sets) > 1: #集合が2以上のときは橋を追加
      print( edges[m][0], '->', edges[m][1] )
      bridge += 1

print( bridge )